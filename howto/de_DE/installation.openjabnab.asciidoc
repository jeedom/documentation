= openjabnab Installation 

Hier ist eine Anleitung wie man openjabnab lokal zu installieren hat (auf einem Rpi oder Humming)

[NOTE]
Diese Anleitung ist gröstenteils von link:http://jetweb.free.fr/nabaztag_rpi/Tutoriel_OJN_RPi_v1-1.pdf[dieser] abgeleitet

== Abhängigkeiten installieren

Une fois le système installé en SSH faite : 

----
apt-get update 
apt-get dist-upgrade 
apt-get install ssh
apt-get install apache2 php5 php5-mysql libapache2-mod-php5
a2enmod rewrite
apt-get install make
apt-get install build-essential 
apt-get install libqt4-dev --fix-missing
apt-get install qt4-dev-tools 
apt-get install bind9 
apt-get install git 
----

== Netzwerkkonfiguration

Il faut ensuite récupérer l'addresse IP du système : 

----
ifconfig
----

Das Ergebnis ist : 

----
eth0      Link encap:Ethernet  HWaddr d0:63:b4:00:54:98
          inet addr:192.168.0.162  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::d263:b4ff:fe00:5498/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:10721 errors:0 dropped:0 overruns:0 frame:0
          TX packets:6477 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:2032942 (1.9 MiB)  TX bytes:1230703 (1.1 MiB)
----

Die IP-Adresse ist 192.168.0.162.

[NOTE]
Pour toute la suite du tuto j'utiliserai cette IP, elle est bien sûr à remplacer en fonction de celle que vous avez réellement

Editez ensuite le fichier /etc/resolv.conf 

----
vim  /etc/resolv.conf 
----

Und hinzufügen : 

----
nameserver 192.168.0.162
----

== DNS Konfiguration

Die Datei /etc/bind/named.conf.local bearbeiten 

----
cd /etc/bind/
vim named.conf.local 
----

Und hinzufügen : 

----
zone "raspberry.pi"{
 type master;
 file "/etc/bind/db.raspberry.pi";
};
zone "0.168.192.in-addr.arpa"{
 type master;
 file "/etc/bind/db.192.168.0.inv";
}; 
----

Créez le fichier db.raspberry.pi

---
vim db.raspberry.pi
---

Und schreiben dort hinein : 

----
$TTL 604800
@ IN SOA ojn.raspberry.pi. root.raspberry.pi. (
 1 ; Serial
 604800 ; Refresh
 86400 ; Retry
 2419200 ; Expire
 604800 ) ; Negative Cache TTL
;
@ IN NS ojn.raspberry.pi.
ojn IN A 192.168.0.162
192.168.0.162 IN A 192.168.0.162
----

Puis créez ce fichier db.192.168.0.inv 

----
vim db.192.168.0.inv 
----

Und hineinschreiben : 

----
$TTL 604800
@ IN SOA ojn.raspberry.pi. root.localhost. (
 2 ; Serial
 604800 ; Refresh
 86400 ; Retry
 2419200 ; Expire
 604800 ) ; Negative Cache TTL
;
@ IN NS ojn.raspberry.pi.
162 IN PTR ojn.raspberry.pi. 
----

[IMPORTANT]
Pensez bien à remplacer le 162 de la dernière ligne par la dernière partie de l'ip de votre système

DNS starten :

----
/etc/init.d/bind9 start 
----

Testen sie, ob alles richtig ist : 

----
ping ojn.raspberry.pi 
----

Sie sollten folgendes sehen : 

----
root@cubox-i:/home/ojn# ping ojn.raspberry.pi
PING ojn.raspberry.pi (192.168.0.162) 56(84) bytes of data.
64 bytes from ojn.raspberry.pi (192.168.0.162): icmp_seq=1 ttl=64 time=0.069 ms
64 bytes from ojn.raspberry.pi (192.168.0.162): icmp_seq=2 ttl=64 time=0.067 ms
64 bytes from ojn.raspberry.pi (192.168.0.162): icmp_seq=3 ttl=64 time=0.059 ms
64 bytes from ojn.raspberry.pi (192.168.0.162): icmp_seq=4 ttl=64 time=0.068 ms
^C
--- ojn.raspberry.pi ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.059/0.065/0.069/0.010 ms
----

[NOTE]
Man muss ctrl+c machen, um das Ping zu verlassen

Par sécurité on va aussi ajouter la résolution dans /etc/hosts, faites :

----
vim /etc/hosts
----

Und hinzufügen : 

----
192.168.0.162 ojn.raspberry.pi
----

== openjabnab Wiederherstellung

On va d'abord créer l'utilisateur : 

----
adduser ojn
cd /home/ojn 
----

Dann kopieren Sie openjabnab :

----
git clone https://github.com/OpenJabNab/OpenJabNab.git 
chown -R ojn:ojn /home/ojn/OpenJabNab/
chmod 0777 /home/ojn/OpenJabNab/http-wrapper/ojn_admin/include 
----

== Web-Server Konfiguration

Machen sie : 

----
cd /etc/apache2/sites-available/
vim ojn.conf
----

Und hinzufügen : 

----
<VirtualHost *:80>
        DocumentRoot /home/ojn/OpenJabNab/http-wrapper/
        ServerName ojn.raspberry.pi
         <Directory />
                 Options FollowSymLinks
                AllowOverride None
         </Directory>
         <Directory /home/ojn/OpenJabNab/http-wrapper/>
                 Options Indexes FollowSymLinks MultiViews
                 AllowOverride all
                Order allow,deny
                 allow from all
         </Directory>
</VirtualHost>
----

Dann aktivieren Sie die Website :

----
a2ensite ojn
----

Il faut ensuite autoriser le répertoire du serveur openjabnab, faites :

----
vim /etc/apache2/apache2.conf
----

Und hinzufügen : 

----
<Directory /home/ojn/>
        Options Indexes FollowSymLinks
        AllowOverride None
        Require all granted
</Directory>
----

Puis on redémarre apache : 

----
service apache2 reload 
----

== openjabnab Installation

Machen sie :

----
su ojn 
cd /home/ojn/OpenJabNab/server
qmake -r
make 
----

[NOTE]
Cette étape peut être très longue (jusqu'à 45min)


== openjabnab Konfiguration

Machen sie :

----
cp openjabnab.ini-dist bin/openjabnab.ini 
vim bin/openjabnab.ini 
----

Und ändern Sie die folgenden Zeilen : 

----
StandAloneAuthBypass = true
AllowAnonymousRegistration = true
AllowUserManageBunny = true
AllowUserManageZtamp = true 
----

Und ersetzen alle #my.domain.com# in #ojn.raspberry.pi#

== openjabnab Web-Server Konfiguration

Sur votre post vous devez éditer le fichier  C:\Windows\System32\drivers\etc et rajouter : 

----
192.168.0.162 ojn.raspberry.pi 
----

Dann gehen Sie zu : 

----
http://ojn.raspberry.pi/ojn_admin/install.php
----

Überprüfen Sie alles

== Server starten

Voilà tout est prêt il ne reste plus qu'à lancer le serveur : 

----
su ojn
cd ~/OpenJabNab/server/bin 
./openjabnab 
----

Gehen Sie jetzt auf : 

----
http://ojn.raspberry.pi/ojn_admin/index.php
----

[NOTE]
Wenn alles richtig ist, sollten Sie die Statistiken haben, die unten angezeigt werden

== Kaninchen Konfiguration

Pour configurer le lapin c'est assez simple, vous devez le débrancher puis en le rebrancher, rester appuyez sur son bouton. Il doit normalement s'allumer en bleu.

Ensuite avec votre PC vous devriez avoir un nouveau réseau wifi nabaztagXX, connectez-vous dessus en tapant 192.168.0.1.

Einmal drin überprüfen Sie Ihre WLAN Konfiguration und die folgenden Informationen : 

----
DHCP enabled : no
Local Mask : 255.255.255.0
Local gateway : 192.168.0.1 ou 192.168.0.254 (en fonction de votre réseau)
DNS server : 192.168.0.162
----

== openjabnab Server Überwachung und Autostart

Comme vous le remarquerez si vous fermez votre session le serveur openjabnab s'arrête. Il faut donc ajouter un petit script pour surveiller le serveur et le démarrer automatiquement. Faites : 

----
cd /home/ojn
vim checkojn.sh
----

Und fügen Sie ein : 

----
if [ $(ps ax | grep openjabnab | grep -v grep | wc -l) -eq 0 ]; then
    su ojn; cd /home/ojn/OpenJabNab/server/bin;nohup ./openjabnab >> /dev/null 2>&1 &
fi
----


Dann machen Sie : 

----
chmod +x checkojn.sh
----

Man muss jetzt das Skript zum starten und prüfen hinzufügen, zum Beispiel alle 15min :

----
crontab -e
----

Und hinzufügen :

----
@reboot /home/ojn/checkojn.sh
*/15 * * * * /home/ojn/checkojn.sh
----

[IMPORTANT]
Il faut absolument le mettre dans la crontab de root, si vous êtes encore avec l'utilisateur ojn faites ctrl+D

== Ihr Kaninchen Konfiguration in openjabnab

Gehe auf : 

----
http://ojn.raspberry.pi/ojn_admin/index.php
----

Sie sollten folgendes sehen : 

image::../images/installation.openjabnab.PNG[]

Il faut vous maintenant vous créer un compte en cliquant sur créer un utilisateur : 

image::../images/installation.openjabnab2.PNG[]

Renseignez les informations demandées et connectez-vous : 

image::../images/installation.openjabnab3.PNG[]

Nach der Anmeldung gehen Sie zu Server: 

image::../images/installation.openjabnab4.PNG[]

Puis descendez pour trouver la liste des lapins connectés et récuperer son adresse mac : 

image::../images/installation.openjabnab5.PNG[]

Allez ensuite sur compte et renseignez le champ nom et adresse mac du lapin puis validez : 

image::../images/installation.openjabnab6.PNG[]

Sie finden jetzt auf der Kaninchenseite Ihr Kaninchen wieder, klicken Sie oben, um seine Konfiguration zu öffnen : 

image::../images/installation.openjabnab7.PNG[]

Il vous faut maintenant activer l'api violet et la passer en public, c'est aussi ici que vous retrouvez la clef api violet qui vous servira pour Jeedom : 

image::../images/installation.openjabnab8.PNG[]

En dessous vous retrouvez la liste des plugins, n'oubliez pas de les activer (type TTS ou contrôle des oreilles) : 

image::../images/installation.openjabnab9.PNG[]

== Jeedom Konfiguration 

La configuration dans Jeedom est assez simple, il faut tout d'abord se connecter en SSH à Jeedom (si vous avez une box Jeedom les identifiants sont dans la doc d'installation). Puis editer le fichier /etc/hosts

----
vim /etc/hosts
----

Und fügen Sie die folgende Zeile hinzu :

----
192.168.0.162 ojn.raspberry.pi
----

Ensuite tous se passe dans Jeedom, après avoir créer votre lapin voilà, la configuration à mettre: 

image::../images/installation.openjabnab10.PNG[]

Voilà votre lapin a maintenant son propre terrier en local !!!!!

== Mettre le TTS en local

Tout est local sauf le TTS qui passe par le site Acapela mais il est possible en modifiant quelques fichiers de le passer en local

[NOTE]
Je vais considérer que oenjabnab est installé dans /home/ojn/OpenJabNab et que vous êtes connecté en tant que l'utilisateur d'openjabnab, ici ojn

=== Création du tts jeedom

Il vous faut crêer un dossier jeedom dans servver/tts :

----
mkdir /home/ojn/OpenJabNab/server/tts/jeedom
----

Il faut ensuite faire 3 fichiers :

- jeedom.pro

----
######################################################################
# Automatically generated by qmake (2.01a) sam. janv. 19 19:10:01 2008
######################################################################

TEMPLATE = lib
CONFIG -= debug
CONFIG += plugin qt release
QT += network xml
QT -= gui
INCLUDEPATH += . ../../server ../../lib
TARGET = tts_jeedom
DESTDIR = ../../bin/tts
DEPENDPATH += . ../../server ../../lib
LIBS += -L../../bin/ -lcommon
MOC_DIR = ./tmp/moc
OBJECTS_DIR = ./tmp/obj
win32 {
  QMAKE_CXXFLAGS_WARN_ON += -WX
}
unix {
  QMAKE_LFLAGS += -Wl,-rpath,\'\$$ORIGIN\'
  QMAKE_CXXFLAGS += -Werror
}

# Input
HEADERS += tts_jeedom.h
SOURCES += tts_jeedom.cpp
----

- tts_jeedom.h

----
#ifndef _TTSACAPELA_H_
#define _TTSACAPELA_H_

#include <QHttp>
#include <QMultiMap>
#include <QTextStream>
#include <QThread>
#include "ttsinterface.h"
  
class TTSJeedom : public TTSInterface
{
  Q_OBJECT
  Q_INTERFACES(TTSInterface)
  
public:
  TTSJeedom();
  virtual ~TTSJeedom();
  QByteArray CreateNewSound(QString, QString, bool);

private:
};

#endif
----

- tts_jeedom.cpp

----
#include <QDateTime>
#include <QUrl>
#include <QCryptographicHash>
#include <QMapIterator>
#include "tts_jeedom.h"
#include "log.h"
#include <QNetworkReply>
#include <QNetworkRequest>
#include <QNetworkAccessManager>

Q_EXPORT_PLUGIN2(tts_jeedom, TTSJeedom)

TTSJeedom::TTSJeedom():TTSInterface("jeedom", "Jeedom")
{
  voiceList.insert("fr", "fr");
}

TTSJeedom::~TTSJeedom()
{
}

QByteArray TTSJeedom::CreateNewSound(QString text, QString voice, bool forceOverwrite)
{
  QEventLoop loop;
  if(!voiceList.contains(voice))
    voice = "fr";
  // Check (and create if needed) output folder
  QDir outputFolder = ttsFolder;
  if(!outputFolder.exists(voice))
    outputFolder.mkdir(voice);

  if(!outputFolder.cd(voice))
  {
    LogError(QString("Cant create TTS Folder : %1").arg(ttsFolder.absoluteFilePath(voice)));
    return QByteArray();
  }

  // Compute fileName
  QString fileName = QCryptographicHash::hash(text.toAscii(), QCryptographicHash::Md5).toHex().append(".mp3");
  QString filePath = outputFolder.absoluteFilePath(fileName);

  if(!forceOverwrite && QFile::exists(filePath))
    return ttsHTTPUrl.arg(voice, fileName).toAscii();

  // Fetch MP3
  QHttp http("TODO_IP_JEEDOM");
  QObject::connect(&http, SIGNAL(done(bool)), &loop, SLOT(quit()));

  QByteArray ContentData;
  ContentData += "apikey=TODO_API_JEEDOM&text="+QUrl::toPercentEncoding(text);

  QHttpRequestHeader Header;
  Header.addValue("Host", "TODO_IP_JEEDOM");

  Header.setContentLength(ContentData.length());
  Header.setRequest("GET", "/core/api/tts.php?apikey=TODO_API_JEEDOM&text="+QUrl::toPercentEncoding(text), 1, 1);
  
  http.request(Header, ContentData);
  loop.exec();
  
  QFile file(filePath);
  if (!file.open(QIODevice::WriteOnly))
  {
    LogError("Cannot open sound file for writing : "+filePath);
    return QByteArray();
  }
  file.write(http.readAll());
  file.close();
  return ttsHTTPUrl.arg(voice, fileName).toAscii();
}
----

[NOTE]
N'oubliez pas de remplacer les TODO

Il faut ensuite activer le tts jeedom en modifiant le fichier /home/ojn/OpenJabNab/server/tts/tts.pro en ajoutant jeedom à SUBDIRS : 

----
TEMPLATE = subdirs
SUBDIRS = acapela google jeedom
----

=== Recompilation

----
cd /home/ojn/OpenJabNab/server
qmake -r
make
----

=== Modification du service de tts

Il faut éditer le fichier /home/ojn/OpenJabNab/server/bin/openjabnab.ini et changer : 

----
TTS=acapela
----

in 

----
TTS=jeedom
----

=== Relance d'openjabnab

Le plus simple est ici de redémarrer la machine pour relancer openjabnab